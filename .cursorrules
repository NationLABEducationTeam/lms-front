# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Always check the implementation of utility functions (like `getApiUrl`) before use to avoid duplication of functionality (e.g. API URL prefixes)
- When migrating existing API calls to Redux/RTK Query, maintain the same request structure:
  - Keep the same URL endpoints
  - Keep the same header structure (especially for auth)
  - Keep the same request body parameter names
  - Keep the same response handling logic
  This ensures compatibility with the backend and prevents unnecessary errors.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- WeekMaterial 인터페이스는 src/types/course.ts에 정의되어 있으며, 다른 파일에서 사용할 때는 명시적으로 import 해야 함
- getApiUrl() 함수는 인자가 필요하며, 경로를 인자로 전달해야 함 (예: getApiUrl('/courses'))
- 성적 항목 관리 UI는 src/pages/admin/courses/[id]/index.tsx 파일의 700-850 라인에 구현되어 있으며, 성적 항목 추가 폼과 목록 표시 기능을 포함함
- RTK Query의 useGetEnrolledCoursesQuery는 잘못된 엔드포인트(Lambda URL)로 요청을 보내는 문제가 있어 기존 getEnrolledCourses 함수를 사용하는 것이 안전함
- 프론트엔드 최적화 시 백엔드 API 엔드포인트를 변경하면 예상치 못한 URL 호출이 발생할 수 있으므로, 기존 API 함수를 유지하면서 클라이언트 사이드 최적화에 집중하는 것이 좋음

# Scratchpad

## Current Task: 프론트엔드 렌더링 및 요청 최적화 - COMPLETED ✅

### 완료된 최적화 작업

#### 1. API 요청 최적화 ✅
[X] RTK Query 캐싱 전략 개선
  - 전역 캐싱: 10분간 유지 (keepUnusedDataFor: 600)
  - 성적 데이터: 5분간 캐시 (keepUnusedDataFor: 300)
  - 과제 목록: 5분간 캐시
  - 과제 상세: 10분간 캐시 (더 오래 캐시)
  - 학생 목록: 10분간 캐시

[X] CourseStatsCard 메모리 캐싱 구현
  - 성적 데이터 로컬 캐시 (5분 TTL)
  - 중복 API 호출 방지
  - 캐시 히트 시 즉시 응답

[X] 대시보드 API 호출 최적화
  - 실패 시 재시도 3회 (지수 백오프)
  - 백그라운드 자동 새로고침 비활성화
  - localStorage 기반 강의 선택 상태 저장

#### 2. 렌더링 최적화 ✅
[X] CourseStatsCard 컴포넌트 최적화
  - React.memo로 불필요한 리렌더링 방지
  - useMemo로 최근 성적 항목 계산 메모이제이션
  - useCallback로 핸들러 함수 메모이제이션
  - formatDate 함수 메모이제이션

[X] 대시보드 페이지 최적화
  - 스켈레톤 로딩 컴포넌트 분리 및 메모이제이션
  - 강의 목록 필터링 메모이제이션
  - 이벤트 핸들러 useCallback 적용
  - 조건부 렌더링 최적화

[X] 성능 개선 결과
  - 중복 API 호출 제거
  - 캐시 활용으로 응답 속도 향상
  - 불필요한 리렌더링 방지
  - 메모리 사용량 최적화

#### 3. UX 개선 ✅
[X] 로딩 상태 개선
  - 스켈레톤 UI 적용 (헤더, 카드)
  - 로딩 스피너에 텍스트 추가
  - 에러 상태 개선 (재시도 버튼)

[X] 사용자 피드백 개선
  - toast 알림으로 새로고침 피드백
  - 에러 발생 시 친화적 메시지
  - 빈 상태 처리 개선

[X] 접근성 개선
  - 검색 가능한 강의 선택 드롭다운
  - 키보드 네비게이션 지원
  - 적절한 컴포넌트 displayName 설정

#### 4. 빌드 오류 해결 ✅
[X] enrollmentApi import 에러 해결
  - useGetEnrolledCoursesQuery를 courseApi에서 import
  - 올바른 API 경로 사용

[X] CourseStatus 타입 에러 해결
  - 'ACTIVE' 문자열 대신 CourseStatus.PUBLISHED enum 사용
  - 타입 안전성 확보

[X] RTK Query 옵션 에러 해결
  - hook에서 잘못된 옵션 제거 (keepUnusedDataFor, retry)
  - 올바른 refetch 옵션만 사용

### 주요 성과
- **API 요청 최적화**: 캐싱으로 불필요한 네트워크 요청 감소
- **렌더링 최적화**: React.memo, useMemo, useCallback 활용으로 성능 향상
- **사용자 경험 개선**: 스켈레톤 UI, 에러 처리, 피드백 개선
- **메모리 효율성**: 컴포넌트 메모이제이션으로 메모리 사용 최적화
- **타입 안전성**: 올바른 enum 사용으로 런타임 에러 방지

### 적용된 최적화 기법
1. **메모이제이션**: React.memo, useMemo, useCallback
2. **캐싱**: RTK Query 캐싱 + 로컬 메모리 캐싱
3. **조건부 렌더링**: 불필요한 컴포넌트 렌더링 방지
4. **지연 로딩**: 필요할 때만 데이터 로드
5. **상태 최적화**: localStorage 활용한 상태 지속성

## Previous Task: 랜딩 페이지 UX/UI 문제점 분석 및 개선 - PARTIAL

### 완료된 개선 작업

#### Phase 1: UI/UX 개선 ✅
[X] Hero 섹션 배경색 변경 (브랜드 색상 적용)
[X] 마우스 추적 효과 제거 (산만함 감소)
[X] 통계 카드 디자인 개선 (그라데이션 텍스트, 더 강한 그림자)
[X] Course 섹션 배경색 차별화 (gray-50)
[X] CourseCard 디자인 전면 개편
[X] 카테고리 필터 디자인 개선 (배경색, 버튼 스타일)
[X] 학습 특징 카드 shadow 적용
[X] 섹션별 배경색 차별화로 시각적 계층 구조 확립

### 남은 작업 (추후 필요시)
- [ ] 컴포넌트 분리
- [ ] 이미지 lazy loading
- [ ] 애니메이션 라이브러리 최소화